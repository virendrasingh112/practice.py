# -*- coding: utf-8 -*-
"""Untitled69.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cdlrEXtLqO_MqTNSf5yZNJEHx8ZCSJh2
"""

newlist=[]
for i in range(1,11):
    newlist.append(i)
print(newlist)

[i**2 for i in range(1,11)if i%2==0]

{i:i**2 for i in range(1,11)}

[(i,j) for i in range(1,5) for j in range(5,8)]

#functions
#block of code => repetative ususage
#code redable,code reusuability
#user defined,inbuild functions

def greeting(z):
    print("hey user",z, "i welcome you onboard")

greeting("ishann")

greeting("z")



#exception handling
#exception => unwanted condition => terminate or result

# classes and object
# object: real time entity characterstic and behaviour
# class:template
#object => class ke andar

b1colour="yellow"
b1.name="splendor"

b1=["yellow","splendor"]

#oops:object oriented programing system
#classes and object

#bike,colour,bikename,price
#template
#blue print => characterstic and behaviour

# variable mai
# function

class Bike_template:
    colour = "yellow"
    name = "splendor"
b1=Bike_template()

print(b1.name)

b1=Bike_template() #b1 isobject

print(b1.name)

b1=Bike_template() #b1 isobject

b1.colour="red"
b1.colour

class Bike_template:
    colour = "yellow"
    name = "splendor"
    def info(self):
        print(self.colour,"bike name:",self.name)

b1=Bike_template()
b1.colour="red"
b1.info()

class bike_template:
    def __init__(self):
        print("calling constructor",self)

b1=bike_template("red")
print("b1",b1)

class student:
    pass
student1=student():

class student:
    def __init__(self,name,grade,percentage,team):
        self.name=name
        self.grade=grade
        self.percentage=percentage
        self.team=team
    def student_details(self):
        print(f"{self.name} is in class {self.grade},with{self.percentage+2}% and is in team{self.team}")
team1 = 'A'
team2 = 'B'
student1=student("ishann",10,96,team1)
print(student1.name,student1.grade)
student2 = student('vishu',12,98,team2)
print(student2.name,student2.grade)
student1.student_details()
student2.student_details()
# modify object property
student1.percentage=98
print(student1.percentage)
print(student1.team)

# there are four features in oops
#abstraction
#encapsulation
#inheritance
#polymorphism

class graduatestudent(student):
    def __init__(self,name,grade,percentage,stream):
        super().__init__(name,grade,percentage,stream)
        self.stream= stream
    def student_details(self):
        print(f'{self.name} is in class{self.grade},with{self.percentage}and from stram{self.stream}')
student1 = student('madhav',11,96,'z')

grad_student1 = graduatestudent('keshav',12,98,'science')
print(grad_student1.stream)

grad_student1.student_details()
student1.student_details()

#polymorphism